name: An example of an automatic testing action
on:
  push:
    branches:
      - ci-cd-pipeline
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Match the Python version used in your app

      # Install dependencies
      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8


      # Run unit tests with pytest
      - name: Run unit tests
        run: |
          cd app
          pytest --cov=./ --cov-report=xml
        env:
          METRICS_NAMESPACE: fastapi
          METRICS_SUBSYSTEM: model
          ENABLE_METRICS: true


  build-image:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker image
      - name: Build API image
        run: |
          cd app
          docker build -t bank-churn-api:monsef992 .

  build-and-push-ecr:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push Docker image to ECR
      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: churn-prediction
          IMAGE_TAG: monsef_992
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr
    if: github.event_name == 'push' && github.ref == 'refs/heads/ci-cd-pipeline'
    steps:
      # Checkout the repository (for docker-compose.yml)
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Log in to Amazon ECR on runner
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # SSH into EC2 and deploy
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: churn-prediction
          IMAGE_TAG: monsef_992
        run: |
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # Log in to ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            # Clone the repository
            git clone $REPO_URL monsef-repo 
            cd monsef-repo
            # Pull the latest image from ECR
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            # Stop and remove existing containers
            docker-compose down
            # Start the new container
            docker-compose up -d
          EOF
          